%% Name: Jose Salinas
%% Date: 09/18/2016
%% Tabs: 2

Package arithmetic

%% This package provides functions for working with integers,
%% represented as binary lists.
%% Lists begin with the low order end of the number.
%% For example, list [1,1,0,0,1] stands for the binary number
%% 10011, or 19 in decimal.
%%
%% A list is *normalized if it does not end on 0.  All of the
%% following functions produce normalized results, even if the
%% parameter(s) are not normalized.

================================================================
                        export
================================================================

Abbrev Bit = Integer.

Expect
  inc           : [Bit] -> [Bit]

                %: inc(x) is x+1, where both x and the result are
                %: binary numbers represented as lists.
                %: For example inc([1,0,1,1]) = [0,1,1,1]
                ;

  dec           : [Bit] -> [Bit]

                %: dec(x) = max(0, x-1), where x and the result are
                %: binary numbers represented as lists.
                ;

  sum           :  ([Bit], [Bit]) -> [Bit]

                %: sum(x,y) = x + y, where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: sum([0,1,1], [1,1,1]) = [1,0,1,1].  (6 + 7 = 13)
                ;

  diff          :  ([Bit], [Bit]) -> [Bit]

                %: diff(x,y) = max(0, x - y), where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: diff([1,1,1], [0,1,1]) = [1]  (7 - 6 = 1) and
                %: diff([0,1,1], [1,1,1]) = []  (6 - 7 = 0).
                ;

  product       : ([Bit], [Bit]) -> [Bit]

                %: product(x,y) = x * y, where x, y and the result are
                %: binary numbers represented as lists.  For example,
                %: product([1,1], [1,1]) = [1,0,0,1].  (3*3 = 9)
                ;

  compareInts   : ([Bit], [Bit]) -> Char

                %: compareInts(x,y) yields
                %:    '<'  if x < y
                %:    '='  if x = y
                %:    '>'  if x > y
                %: where x and y are binary numbers represented as
                %: lists.  For example, compareInts([0,0,1,1], [0,1,0,1])
                %: yields '>', since 12 > 10.
  
%Expect

================================================================
                        implementation
================================================================

Import removeTrailing from "collect/list".
Define normalize = removeTrailing 0.

===============================================================
%%                    inc
===============================================================
%% incn is similar to inc, but does not normalize its result.
%% (n stands for non-normalizing)

Define 
  ----------------------------------------------
  %% 0 + 1 = 1
  case incn ([]) = [1]
  ----------------------------------------------
  %% (2t) + 1 = 2t + 1
  case incn (0::t) = 1 :: t
  ----------------------------------------------
  %% (2t+1) + 1 = 2(t+1)
  case incn (1::t) = 0 :: incn t
  ----------------------------------------------
%Define

Define inc x = normalize(incn x).

Example inc [1,1,0,1,1,0,0] = [0,0,1,1,1].
Example inc [1] = [0,1].
Example inc [1,0,0] = [0,1].


===============================================================
%%                    dec
===============================================================
%% decn is simliar to dec, but does not normalize its result.
%% (n stands for non-normalizing)

Define 
  ----------------------------------------------
  %% [] - 1 = []
  case decn ([]) = []
  ----------------------------------------------
  %% (2t+1) - 1 = 2t
  case decn (1 :: t) = 0 :: t
  ----------------------------------------------
  %% (2t) - 1 = 2(t - 1) + 1
  case decn (0 :: t) = 1 :: decn t
  ----------------------------------------------
%Define

Define dec x = normalize(decn x).
Example dec [1] = [].
Example dec [1,1] = [0,1].
Example dec [0,0,1] = [1,1].

===============================================================
%%                    sum
===============================================================
%% sumn is simliar to sum, but does not normalize its result.
%% (n stands for non-normalizing)

Define 
  ----------------------------------------------
  %% x is 0 or empty
  case sumn (x,y) = y when x == []
  ----------------------------------------------
  %% y is 0 or empty
  case sumn (x,y) = x when y == []
  ----------------------------------------------
  %% (2x + 1) + (2y + 1) = 2(x + y + 1)
  case sumn ((1::x),(1::y)) = 0 :: incn(sumn(x,y))
  ----------------------------------------------
  %% (2x + 1) + (2y) = 2(x+y) + 1
  case sumn ((1::x),(0::y)) = 1 :: sumn (x,y)
  ----------------------------------------------
  %% 2x + (2y + 1) = 2(x+y) + 1
  case sumn ((0::x),(1::y)) = 1 :: sumn (x,y)
  ----------------------------------------------
  %% 2x + 2y = 2(x+y)
  case sumn ((0::x),(0::y)) = 0 :: sumn (x,y)
  ----------------------------------------------
%Define

Define sum (x,y) = normalize(sumn (x,y)).
Example sum ([],[1,0,1,1]) = [1,0,1,1].
Example sum ([0,1,1],[1,1]) = [1,0,0,1].
Example sum ([0,1,1],[1,1,1]) = [1,0,1,1].

===============================================================
%%                    diff
===============================================================
%% diffn is similar to diff, but does not normalize the result.
%% (n stands for non-normalizing)
Define 
  ----------------------------------------------
  %% x - 0 = x
  case diffn(x,y) = x when y == []
  ----------------------------------------------
  %% 0 - x = 0
  case diffn(x,?) = [0] when x == []
  ----------------------------------------------
  %% x < y
  case diffn(x,y) = [0] when compareInts(x,y) == '<'
  ----------------------------------------------
   %% (2x) - (2y + 1) = 2(x-y) + 1
  case diffn((0::x),(1::y)) = 1::decn(diffn(x,y))
  ----------------------------------------------
  %% (2x + 1) - (2y) = 2(x-y) + 1
  case diffn((1::x),(0::y)) = 1::diffn(x,y)
  ----------------------------------------------
  %% (2x+1) - (2y+1) = 2(x-y) + 2
  case diffn((1::x),(1::y)) = 0::diffn(x,y)
  ----------------------------------------------
  %% (2x) - (2y) = 2x - 2y
  case diffn((0::x),(0::y)) = 0::diffn(x,y)
  ----------------------------------------------
%Define

Define diff (x,y) = normalize(diffn (x,y)).
Example diff ([0,1,1],[1,1,1])=[].
Example diff ([1,1,1],[0,1,1])=[1].
Example diff ([0,1,1,1],[1,1,1])=[1,1,1].

===============================================================
%%                    product
===============================================================
%% productn is similar to product, but does not normalize its result.
%% (n stands for non-normalizing)
Define
  ----------------------------------------------
  %% (x) * 0 = 0
  case productn(?,[]) = [0]
  ----------------------------------------------
   %% 0 * (y) = 0
  case productn([],?) = [0]
  ----------------------------------------------
  %% 2y * x = 2yx
  case productn(x,0::y) = 0::productn(x,y)
  ----------------------------------------------
  %% 2x * y = 2xy
  case productn(0::x,y) = 0::productn(x,y)
  ----------------------------------------------
   %% x * (2y+1) = 2xy + x
  case productn(x,1::y) = sumn(0::productn(x,y),x)
  ----------------------------------------------
  %% (2x + 1) * y = 2xy + y
  case productn(1::x,y) = sumn(0::productn(x,y),y)
  ----------------------------------------------
%Define

Define product (x,y) = normalize(productn (x,y)).
Example product ([1,1], [1,1]) = [1,0,0,1].
Example product ([1,0,1],[0,1]) = [0,1,0,1].
Example product ([1,0,0,1],[0,0,1]) = [0,0,1,0,0,1].

===============================================================
%%                    compareInts 
===============================================================
%% compareInts compares two binary numbers
Define
  ----------------------------------------------
  %% if both are empty
  case compareInts([],[]) = '='
  ----------------------------------------------
  %% y is an empty list
  case compareInts(x,[]) = '>' when x =/= []
  ----------------------------------------------
  %% x is an empty list
  case compareInts([],y) = '<' when y =/= []
  ----------------------------------------------
  %% same length and head(x) == 0 & head(y) == 1 
  case compareInts(0::x,1::y) = '<' when x == y
  ----------------------------------------------
  %% same length and head(x) == 1 & head(y) == 0
  case compareInts(1::x,0::y) = '>' when x == y
  ----------------------------------------------
  %% same length and head(x) == 0 & head(y) == 0
  case compareInts(0::x,0::y) = '=' when x == y
  ----------------------------------------------
  %% same length and head(x) == 1 & head(y) == 1
  case compareInts(1::x,1::y) = '=' when x == y
  ----------------------------------------------
  %% check the tail
  case compareInts(?::x,?::y) = '<' when compareInts(x,y) == '<'
  ----------------------------------------------
  %% check the tail
  case compareInts(?::x,?::y) = '>' when compareInts(x,y) == '>'
  ----------------------------------------------
%Define
Example compareInts([1,1,0,1], [1,1]) = '>'.
Example compareInts([1,0,0,1],[0,1,0,1]) = '<'.
Example compareInts([1,1,0,0,1],[1,1,0,0,1]) = '='.
%Package
