Thu Sep 22 16:37:01 2016
ECU Cinnameg, version 9.0.5 (byte code version 73)
File /home/INTRA/salinasj14/comlang/assn2/arithmetic.cmg


   1 %% Name: Jose Salinas
   2 %% Date: 09/18/2016
   3 %% Tabs: 2
   4 
   5 Package arithmetic
   6 
   7 %% This package provides functions for working with integers,
   8 %% represented as binary lists.
   9 %% Lists begin with the low order end of the number.
  10 %% For example, list [1,1,0,0,1] stands for the binary number
  11 %% 10011, or 19 in decimal.
  12 %%
  13 %% A list is *normalized if it does not end on 0.  All of the
  14 %% following functions produce normalized results, even if the
  15 %% parameter(s) are not normalized.
  16 
  17 ================================================================
  18                         export
  19 ================================================================
  20 
  21 Abbrev Bit = Integer.
  22 
  23 Expect
  24   inc           : [Bit] -> [Bit]
  25 
  26                 %: inc(x) is x+1, where both x and the result are
  27                 %: binary numbers represented as lists.
  28                 %: For example inc([1,0,1,1]) = [0,1,1,1]

--> arithmetic.inc
              : ([Integer] -> [Integer])
              Expect {--public--}

  29                 ;
  30 
  31   dec           : [Bit] -> [Bit]
  32 
  33                 %: dec(x) = max(0, x-1), where x and the result are
  34                 %: binary numbers represented as lists.

--> arithmetic.dec
              : ([Integer] -> [Integer])
              Expect {--public--}

  35                 ;
  36 
  37   sum           :  ([Bit], [Bit]) -> [Bit]
  38 
  39                 %: sum(x,y) = x + y, where x, y and the result are
  40                 %: binary numbers represented as lists.  For example,
  41                 %: sum([0,1,1], [1,1,1]) = [1,0,1,1].  (6 + 7 = 13)

--> arithmetic.sum
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  42                 ;
  43 
  44   diff          :  ([Bit], [Bit]) -> [Bit]
  45 
  46                 %: diff(x,y) = max(0, x - y), where x, y and the result are
  47                 %: binary numbers represented as lists.  For example,
  48                 %: diff([1,1,1], [0,1,1]) = [1]  (7 - 6 = 1) and
  49                 %: diff([0,1,1], [1,1,1]) = []  (6 - 7 = 0).

--> arithmetic.diff
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  50                 ;
  51 
  52   product       : ([Bit], [Bit]) -> [Bit]
  53 
  54                 %: product(x,y) = x * y, where x, y and the result are
  55                 %: binary numbers represented as lists.  For example,
  56                 %: product([1,1], [1,1]) = [1,0,0,1].  (3*3 = 9)

--> arithmetic.product
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  57                 ;
  58 
  59   compareInts   : ([Bit], [Bit]) -> Char
  60 
  61                 %: compareInts(x,y) yields
  62                 %:    '<'  if x < y
  63                 %:    '='  if x = y
  64                 %:    '>'  if x > y
  65                 %: where x and y are binary numbers represented as
  66                 %: lists.  For example, compareInts([0,0,1,1], [0,1,0,1])
  67                 %: yields '>', since 12 > 10.

--> arithmetic.compareInts
              : (([Integer], [Integer]) -> Char)
              Expect {--public--}

  68   
  69 %Expect
  70 
  71 ================================================================
  72                         implementation
  73 ================================================================
  74 
  75 Import removeTrailing from "collect/list".

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/list.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/listfun.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/fold.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/prefsuff.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/search.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/zip.cmg"

  76 Define normalize = removeTrailing 0.

--> private.normalize
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

  77 
  78 ===============================================================
  79 %%                    inc
  80 ===============================================================
  81 %% incn is similar to inc, but does not normalize its result.
  82 %% (n stands for non-normalizing)
  83 
  84 Define 
  85   ----------------------------------------------
  86   %% 0 + 1 = 1
  87   case incn ([]) = [1]
  88   ----------------------------------------------
  89   %% (2t) + 1 = 2t + 1
  90   case incn (0::t) = 1 :: t
  91   ----------------------------------------------
  92   %% (2t+1) + 1 = 2(t+1)
  93   case incn (1::t) = 0 :: incn t
  94   ----------------------------------------------
  95 %Define

--> private.incn
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

  96 
  97 Define inc x = normalize(incn x).

--> arithmetic.inc
              : ([Integer] -> [Integer])
              Define {--public--}

  98 
  99 Example inc [1,1,0,1,1,0,0] = [0,0,1,1,1].
 100 Example inc [1] = [0,1].
 101 Example inc [1,0,0] = [0,1].
 102 
 103 
 104 ===============================================================
 105 %%                    dec
 106 ===============================================================
 107 %% decn is simliar to dec, but does not normalize its result.
 108 %% (n stands for non-normalizing)
 109 
 110 Define 
 111   ----------------------------------------------
 112   %% [] - 1 = []
 113   case decn ([]) = []
 114   ----------------------------------------------
 115   %% (2t+1) - 1 = 2t
 116   case decn (1 :: t) = 0 :: t
 117   ----------------------------------------------
 118   %% (2t) - 1 = 2(t - 1) + 1
 119   case decn (0 :: t) = 1 :: decn t
 120   ----------------------------------------------
 121 %Define

--> private.decn
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

 122 
 123 Define dec x = normalize(decn x).

--> arithmetic.dec
              : ([Integer] -> [Integer])
              Define {--public--}

 124 Example dec [1] = [].
 125 Example dec [1,1] = [0,1].
 126 Example dec [0,0,1] = [1,1].
 127 
 128 ===============================================================
 129 %%                    sum
 130 ===============================================================
 131 %% sumn is simliar to sum, but does not normalize its result.
 132 %% (n stands for non-normalizing)
 133 
 134 Define 
 135   ----------------------------------------------
 136   %% x is 0 or empty
 137   case sumn (x,y) = y when x == []
 138   ----------------------------------------------
 139   %% y is 0 or empty
 140   case sumn (x,y) = x when y == []
 141   ----------------------------------------------
 142   %% (2x + 1) + (2y + 1) = 2(x + y + 1)
 143   case sumn ((1::x),(1::y)) = 0 :: incn(sumn(x,y))
 144   ----------------------------------------------
 145   %% (2x + 1) + (2y) = 2(x+y) + 1
 146   case sumn ((1::x),(0::y)) = 1 :: sumn (x,y)
 147   ----------------------------------------------
 148   %% 2x + (2y + 1) = 2(x+y) + 1
 149   case sumn ((0::x),(1::y)) = 1 :: sumn (x,y)
 150   ----------------------------------------------
 151   %% 2x + 2y = 2(x+y)
 152   case sumn ((0::x),(0::y)) = 0 :: sumn (x,y)
 153   ----------------------------------------------
 154 %Define

--> private.sumn
              : (([<a>], [<a>]) -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

 155 
 156 Define sum (x,y) = normalize(sumn (x,y)).

--> arithmetic.sum
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 157 Example sum ([],[1,0,1,1]) = [1,0,1,1].
 158 Example sum ([0,1,1],[1,1]) = [1,0,0,1].
 159 Example sum ([0,1,1],[1,1,1]) = [1,0,1,1].
 160 
 161 ===============================================================
 162 %%                    diff
 163 ===============================================================
 164 %% diffn is similar to diff, but does not normalize the result.
 165 %% (n stands for non-normalizing)
 166 Define 
 167   ----------------------------------------------
 168   %% x - 0 = x
 169   case diffn(x,y) = x when y == []
 170   ----------------------------------------------
 171   %% 0 - x = 0
 172   case diffn(x,?) = [0] when x == []
 173   ----------------------------------------------
 174   %% x < y
 175   case diffn(x,y) = [0] when compareInts(x,y) == '<'
 176   ----------------------------------------------
 177    %% (2x) - (2y + 1) = 2(x-y) + 1
 178   case diffn((0::x),(1::y)) = 1::decn(diffn(x,y))
 179   ----------------------------------------------
 180   %% (2x + 1) - (2y) = 2(x-y) + 1
 181   case diffn((1::x),(0::y)) = 1::diffn(x,y)
 182   ----------------------------------------------
 183   %% (2x+1) - (2y+1) = 2(x-y) + 2
 184   case diffn((1::x),(1::y)) = 0::diffn(x,y)
 185   ----------------------------------------------
 186   %% (2x) - (2y) = 2x - 2y
 187   case diffn((0::x),(0::y)) = 0::diffn(x,y)
 188   ----------------------------------------------
 189 %Define

--> private.diffn
              : (([Integer], [Integer]) -> [Integer])
              Define {--private--}

 190 
 191 Define diff (x,y) = normalize(diffn (x,y)).

--> arithmetic.diff
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 192 Example diff ([0,1,1],[1,1,1])=[].
 193 Example diff ([1,1,1],[0,1,1])=[1].
 194 Example diff ([0,1,1,1],[1,1,1])=[1,1,1].
 195 
 196 ===============================================================
 197 %%                    product
 198 ===============================================================
 199 %% productn is similar to product, but does not normalize its result.
 200 %% (n stands for non-normalizing)
 201 Define
 202   ----------------------------------------------
 203   %% (x) * 0 = 0
 204   case productn(?,[]) = [0]
 205   ----------------------------------------------
 206    %% 0 * (y) = 0
 207   case productn([],?) = [0]
 208   ----------------------------------------------
 209   %% 2y * x = 2yx
 210   case productn(x,0::y) = 0::productn(x,y)
 211   ----------------------------------------------
 212   %% 2x * y = 2xy
 213   case productn(0::x,y) = 0::productn(x,y)
 214   ----------------------------------------------
 215    %% x * (2y+1) = 2xy + x
 216   case productn(x,1::y) = sumn(0::productn(x,y),x)
 217   ----------------------------------------------
 218   %% (2x + 1) * y = 2xy + y
 219   case productn(1::x,y) = sumn(0::productn(x,y),y)
 220   ----------------------------------------------
 221 %Define

--> private.productn
              : (([<a>], [<a>]) -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

 222 
 223 Define product (x,y) = normalize(productn (x,y)).

--> arithmetic.product
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 224 Example product ([1,1], [1,1]) = [1,0,0,1].
 225 Example product ([1,0,1],[0,1]) = [0,1,0,1].
 226 Example product ([1,0,0,1],[0,0,1]) = [0,0,1,0,0,1].
 227 
 228 ===============================================================
 229 %%                    compareInts 
 230 ===============================================================
 231 %% compareInts compares two binary numbers
 232 Define
 233   ----------------------------------------------
 234   %% if both are empty
 235   case compareInts([],[]) = '='
 236   ----------------------------------------------
 237   %% y is an empty list
 238   case compareInts(x,[]) = '>' when x =/= []
 239   ----------------------------------------------
 240   %% x is an empty list
 241   case compareInts([],y) = '<' when y =/= []
 242   ----------------------------------------------
 243   %% same length and head(x) == 0 & head(y) == 1 
 244   case compareInts(0::x,1::y) = '<' when x == y
 245   ----------------------------------------------
 246   %% same length and head(x) == 1 & head(y) == 0
 247   case compareInts(1::x,0::y) = '>' when x == y
 248   ----------------------------------------------
 249   %% same length and head(x) == 0 & head(y) == 0
 250   case compareInts(0::x,0::y) = '=' when x == y
 251   ----------------------------------------------
 252   %% same length and head(x) == 1 & head(y) == 1
 253   case compareInts(1::x,1::y) = '=' when x == y
 254   ----------------------------------------------
 255   %% check the tail
 256   case compareInts(?::x,?::y) = '<' when compareInts(x,y) == '<'
 257   ----------------------------------------------
 258   %% check the tail
 259   case compareInts(?::x,?::y) = '>' when compareInts(x,y) == '>'
 260   ----------------------------------------------
 261 %Define

--> arithmetic.compareInts
              : (([Integer], [Integer]) -> Char)
              Define {--public--}

 262 Example compareInts([1,1,0,1], [1,1]) = '>'.
 263 Example compareInts([1,0,0,1],[0,1,0,1]) = '<'.
 264 Example compareInts([1,1,0,0,1],[1,1,0,0,1]) = '='.
 265 %Package

