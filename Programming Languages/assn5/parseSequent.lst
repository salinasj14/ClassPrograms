Thu Nov 10 17:20:00 2016
ECU Cinnameg, version 9.0.5 (byte code version 73)
File /home/INTRA/salinasj14/comlang/assn5/parseSequent.cmg


   1 Package parseSequent
   2 
   3 ==============================================================
   4                    export
   5 ==============================================================
   6 
   7 Import "sequent".

--> Import "/home/INTRA/salinasj14/comlang/assn5/sequent.cmg"

   8 
   9 Expect 
  10   cmg.get : String -> (Formula, String)
  11 
  12     %: cmg.get of type String -> (Formula, String)
  13     %: is the same as getFormula.  It allows you
  14     %: to extract a formula from a string using
  15     %: a pattern match.  For example,
  16     %:   Extract $(f).
  17     %: reads a formula f from the standard input.

--> cmg.get
              : (String -> (Formula, String))
              Expect {--public--}

  18     ;
  19 
  20   getFormula : String -> (Formula, String)
  21 
  22     %: getFormula(s) breaks s into a prefix A that
  23     %: describes a formula and a suffix B after that.
  24     %: It converts prefix A into a formula F and yields
  25     %: result (F,B).
  26     %:
  27     %: The following grammar describes a formula.
  28     %: vblname is any string of letters.
  29     %:
  30     %:   formula   -> sum ==> formula
  31     %:             |  sum
  32     %:
  33     %:   sum       -> term \/ sum
  34     %:             |  term
  35     %:
  36     %:   term      -> component /\ term
  37     %:             |  component
  38     %:
  39     %:   component -> - component
  40     %:             |  ( formula )
  41     %:             |  vblname

--> parseSequent.getFormula
              : (String -> (Formula, String))
              Expect {--public--}

  42     ;
  43 
  44   getFormulas: String -> ([Formula], String)
  45 
  46     %: getFormulas(s) breaks string s into a prefix A
  47     %: that is a comma-separated list of formulas
  48     %: and a suffix B after that.  It converts L
  49     %: into a list L of formulas and yields (L,B).
  50     %:
  51     %: If there are no formulas to get at the
  52     %: beginning of s, the result is [].

--> parseSequent.getFormulas
              : (String -> ([Formula], String))
              Expect {--public--}

  53     ;
  54 
  55   cmg.get : String -> (Sequent, String)
  56 
  57     %: cmg.get of type String -> (Sequent, String)
  58     %: is the same as getSequent.  It allows you
  59     %: to extract a sequent from a string using
  60     %: a pattern match.  For example,
  61     %:   Extract $(s).
  62     %: reads a sequent s from the standard input.

--> cmg.get
              : (String -> (Sequent, String))
              Expect {--public--}

  63     ;
  64 
  65   getSequent : String -> (Sequent, String)
  66 
  67     %: getSequent(s) breaks string s into a prefix A
  68     %: that is a comma-separated list of formulas
  69     %: and a suffix B after that.  It converts L
  70     %: into a list L of formulas and yields (L,B).
  71     %:
  72     %: The following grammar describes a sequent.
  73     %:
  74     %:   sequent   -> formulas |- formulas
  75     %:
  76     %:   formulas  -> formula , formulas
  77     %:             |  formula

--> parseSequent.getSequent
              : (String -> (Sequent, String))
              Expect {--public--}

  78 %Expect
  79 
  80 ==================================================
  81 Expect{--missing--} formula: Formula -> String.

--> parseSequent.formula
              : (Formula -> String)
              Expect {--public--}

  82 
  83 Pattern formula(x) ++ rest =>
  84   Match (x,r) =~ getFormula(target).
  85   Match rest  =~ r.
  86 %Pattern

--> cmg.++
              : ((String, String) -> String)
              Pattern {--public--}

  87 
  88 Pattern formula(x) =>
  89   Match (x, ~whiteSpace) =~ getFormula(target).
  90 %Pattern

--> parseSequent.formula
              : (Formula -> String)
              Pattern {--public--}

  91 ==================================================
  92 Expect{--missing--} formulas: [Formula] -> String.

--> parseSequent.formulas
              : ([Formula] -> String)
              Expect {--public--}

  93 Pattern formulas(x) ++ rest =>
  94   Match (x,r) =~ getFormulas(target).
  95   Match rest  =~ r.
  96 %Pattern

--> cmg.++
              : ((String, String) -> String)
              Pattern {--public--}

  97 
  98 Pattern formulas(x) =>
  99   Match (x, ~whiteSpace) =~ getFormulas(target).
 100 %Pattern

--> parseSequent.formulas
              : ([Formula] -> String)
              Pattern {--public--}

 101 ==================================================  
 102 Expect{--missing--} sequent: Sequent -> String.

--> parseSequent.sequent
              : (Sequent -> String)
              Expect {--public--}

 103 Pattern sequent(x) ++ rest =>
 104   Match (x,r) =~ getSequent(target).
 105   Match rest  =~ r.
 106 %Pattern

--> cmg.++
              : ((String, String) -> String)
              Pattern {--public--}

 107 
 108 Pattern sequent(x) =>
 109   Match (x, ~whiteSpace) =~ getSequent(target).
 110 %Pattern

--> parseSequent.sequent
              : (Sequent -> String)
              Pattern {--public--}

 111 ==================================================
 112   
 113 ==============================================================
 114                    implementation
 115 ==============================================================
 116 
 117 Import "collect/search".

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/search.cmg"

 118 
 119 ==============================================================
 120 %%                     get
 121 ==============================================================
 122 
 123 Define 
 124   cmg.get = getFormula;

--> cmg.get
              : (String -> (Formula, String))
              Define {--public--}

 125   cmg.get = getSequent
 126 %Define

--> cmg.get
              : (String -> (Sequent, String))
              Define {--public--}

 127 
 128 ==============================================================
 129 %%                     parse
 130 ==============================================================
 131 
 132 Expect parse: (String -> (<a>, String), 
 133                String, 
 134                (<a>, <b>) -> <b>,
 135                <a> -> <b>,
 136                <b>) 
 137               -> String -> (<b>, String)
 138 
 139   %: (parse(getter, opname, op, sgl, nullval) str) breaks
 140   %: str into a prefix A and suffix B.  The prefix
 141   %: A is a sequence of things extracted by getter,
 142   %: separated by occurrence of opname.
 143   %:
 144   %: If there is only an item from getter (so no occurrence
 145   %: of opname is seen) then the item is converted to a
 146   %: result A' as sgl(item).
 147   %:
 148   %: If there is an occurrence of opname, then we see
 149   %:   item opname items
 150   %: That is converted into a result as op(item, items).
 151   %:
 152   %: If getter cannot get even one value, yield result
 153   %: (nullval, str).

--> private.parse
              : (((String -> (<a>, String)), String, ((<a>, <b>) -> <b>), (<a> -> <b>), <b>) -> (String -> (<b>, String)))
              Expect {--private--}

 154 %Expect
 155 
 156 Define parse (getter, opname, op, sgl, nullval) = parser |
 157   Define parser str =
 158     Try*
 159       Match (x, ~whiteSpace ++ r1) =~ getter(skipWS(str)).
 160     then
 161       open If* opname `prefix?` r1 then
 162         (x `op` y, r2) |
 163           !(y, r2) =~ parser(r1 `lminus` opname).
 164       else 
 165         (sgl x, r1)
 166       %If*
 167     else
 168       (nullval, str)
 169     %Try*
 170   %Define
 171 %Define

--> private.parse
              : (((String -> (<a>, String)), String, ((<a>, <b>) -> <b>), (<a> -> <b>), <b>) -> (String -> (<b>, String)))
              Define {--private--}

 172 
 173 ==============================================================
 174 %%                     getFormulas
 175 %%                     getFormula
 176 %%                     getSum
 177 %%                     getTerm
 178 ==============================================================
 179 
 180 Expect getTerm, getSum: String -> (Formula, String).

--> private.getSum
              : (String -> (Formula, String))
              Expect {--private--}

--> private.getTerm
              : (String -> (Formula, String))
              Expect {--private--}

 181 
 182 Define 
 183   getFormulas = parse(getFormula, ",", ::,  singletonList, []);

--> parseSequent.getFormulas
              : (String -> ([Formula], String))
              Define {--public--}

 184 
 185   getFormula  = parse(getSum,   "==>", ==>, idf, (:fail testX:));

--> parseSequent.getFormula
              : (String -> (Formula, String))
              Define {--public--}

 186 
 187   getSum      = parse(getTerm,  "\\/",  \/,  idf, (:fail testX:));

--> private.getSum
              : (String -> (Formula, String))
              Define {--private--}

 188 
 189   getTerm     = parse(getComponent, "/\\",  /\,  idf, (:fail testX:))
 190 %Define 

--> private.getTerm
              : (String -> (Formula, String))
              Define {--private--}

 191 
 192 ==============================================================
 193 %%                     getComponent
 194 ==============================================================
 195 
 196 Expect getComponent: String -> (Formula, String).

--> private.getComponent
              : (String -> (Formula, String))
              Expect {--private--}

 197 
 198 Define 
 199   case getComponent('-' :: r) = (neg a, r2) |
 200     !(a,r2) =~ getComponent(r).
 201 
 202   case getComponent('(' :: r) = (a, r2) |
 203     Match formula(a) ++ ~whiteSpace ++ ")" ++ r2 =~ r.
 204     
 205   case getComponent(span (=letters) name ++ rest) = (vbl name, rest)
 206 
 207   case getComponent(?) = fail testX
 208 %Define

--> private.getComponent
              : (String -> (Formula, String))
              Define {--private--}

 209 
 210 ==============================================================
 211 %%                     getSequent
 212 ==============================================================
 213 
 214 Define getSequent(str) = (lhs |- rhs, rest) |
 215   Match formulas(lhs) ++ ~whiteSpace ++ "|-" ++ formulas(rhs) ++ rest = str.
 216 %Define

--> parseSequent.getSequent
              : (String -> (Sequent, String))
              Define {--public--}

 217 
 218 %Package
